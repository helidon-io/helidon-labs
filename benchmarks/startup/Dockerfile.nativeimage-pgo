#
# Copyright (c) 2025 Oracle and/or its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# syntax=docker/dockerfile:1.7-labs
FROM helidon/benchmark-startup-base AS benchmark

WORKDIR /usr/share

ENV JDK_URL="https://download.oracle.com/graalvm"
ENV DOWNLOAD_URL="$JDK_URL/21/latest/graalvm-jdk-21_linux-x64_bin.tar.gz"
ENV JAVA_HOME=/usr/share/jdk-21-graal

# Install GraalVM
RUN wget -O jdk.tar.gz ${DOWNLOAD_URL} && \
    mkdir -p $JAVA_HOME && \
    tar zxf ./jdk.tar.gz -C $JAVA_HOME --strip-components=1 && \
    ln -sf $JAVA_HOME/bin/java /bin/ && \
    ln -sf $JAVA_HOME/bin/jcmd /bin/ && \
    ln -sf $JAVA_HOME/bin/jps /bin/

WORKDIR /helidon

ARG FLAVOR=mp
ENV FLAVOR=$FLAVOR

ADD ${FLAVOR}-bench-app/pom.xml .
ADD ${FLAVOR}-bench-app/src src

# Extra layer with deps download
RUN mvn package -DskipTests

ARG WARMUP_CACHEBUST=1

# Do the snapshot
RUN <<END_OF_SCRIPT
cat <<EOF > after-warmup.sh
#!/bin/bash -e
# Flush default.iprof
kill \$PID
EOF
END_OF_SCRIPT

# AOT build and warmup
RUN <<END_OF_SCRIPT
cat <<EOF > aot-build.sh
#!/bin/bash
# Create native image with PGO instrumentation
mvn package -Pnative-pgo-instrumented -DskipTests
./target/benchmark-instrumented |& tee helidon-warmup.log &

PID=\$(ps | grep "benchmark" | awk '{print \$1}')

# Warmup with PGO data collection
source warmup.sh

# Crate native image again this time with PGO data (default.iprof)
mvn clean package -Pnative-pgo -DskipTests
EOF
END_OF_SCRIPT

# Run AOT script and measure time
RUN /usr/bin/time -f "$AOT_TIME_FORMAT" -o $AOT_TIME_FILE bash aot-build.sh

# Runtime benchmark
RUN <<END_OF_SCRIPT
cat <<EOF > run.sh
#!/bin/bash -e
./target/benchmark-pgo |& tee helidon-run.log &

PID=\$(ps | grep "benchmark" | awk '{print \$1}')

source benchmark.sh
EOF
END_OF_SCRIPT

CMD ["/bin/bash", "run.sh"]